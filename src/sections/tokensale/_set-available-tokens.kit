<section class="container section-allow-tokens" style="background:#f1f1f1;margin:10px auto 10px auto;border: 1px #999999 dotted;border-radius:2px;">
  <form>
    <div class="row center">
      <div class="col-xs-12">
        <h1>Set Allowed Tokens - Ethereum ERC20</h1>
        <p>Set the allowance for the token (Currently: <span class="current_value"></span>)</p>
      </div>
    </div>
    <div class="row center">
      <div class="col-xs-8 col-xs-offset-2">
        <div class="field-with-helper">
          <label for="allowed_tokens">Allowed Tokens (0 Places)</label>
          <input name="allowed_tokens" id="allowed_tokens" type="number" value="100000000000" />
          <span class="helper-box" data-toggle="popover" data-trigger="manual" title="Allowed Tokens" data-placement="left" data-content=""></span>
        </div>
      </div>
    </div>
    <div class="row center">
      <div class="col-xs-offset-3 col-xs-6">
        <span class="error-message"></span>
      </div>
    </div>
    <div class="row center">
      <div class="col-xs-offset-3 col-xs-6">
        <button class="allow_tokens" type="button">Allow Tokens</button>
      </div>
    </div>
  </form>
</section>

<script>
  $(document).ready(() => {
    let section = $(".section-allow-tokens");
    section.find(".allow_tokens").click(function() {
      var client = new XYClient(function(client) {
        var section = $(".section-allow-tokens");
        var allowedTokens = client.toBigInt(section.find("[name='allowed_tokens']").val());
        var contractFile = '/contracts/TokenSale/lib/ERC20.json';
        let contract = new XYContract(contractFile, (contract) => {
          try {
            let instance = contract.getInstance(client.getWeb3(), client.config.tokenAddress);
            instance.approve(client.config.saleAddress, allowedTokens, (error, result) => {
              if (error) {
                console.error(error);
              } else {
                console.log(result);
              }
            });
          } catch (ex) {
            $(".error-message").text(ex.message);
            console.error(ex);
          }
        });
      });
    });
    var client = new XYClient(function(client) {
      var saleContractFile = '/contracts/TokenSale/lib/ERC20.json';
      let contract = new XYContract(saleContractFile, (contract) => {
        try {
          let instance = contract.getInstance(client.getWeb3(), client.config.tokenAddress);
          instance.allowance(client.getDAppAddress(), client.config.saleAddress, (error, result) => {
            if (error) {
              $(".error-message").text(ex.message);
              console.error(error);
            } else {
              console.log("CurrentValue: " + result);
              section.find(".current_value").html(result.shift(-18).toString(10));
            }
          });
        } catch (ex) {
          $(".error-message").text(ex.message);
          console.error(ex);
        }
      });

    });
  });
</script>
